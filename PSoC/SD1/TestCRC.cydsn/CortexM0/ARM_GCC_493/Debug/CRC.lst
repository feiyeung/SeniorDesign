ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CRC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRC_Enable,"ax",%progbits
  18              		.align	2
  19              		.global	CRC_Enable
  20              		.code	16
  21              		.thumb_func
  22              		.type	CRC_Enable, %function
  23              	CRC_Enable:
  24              	.LFB1:
  25              		.file 1 "Generated_Source\\PSoC4\\CRC.c"
   1:Generated_Source\PSoC4/CRC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/CRC.c **** * File Name: CRC.c
   3:Generated_Source\PSoC4/CRC.c **** * Version 2.40
   4:Generated_Source\PSoC4/CRC.c **** *
   5:Generated_Source\PSoC4/CRC.c **** * Description:
   6:Generated_Source\PSoC4/CRC.c **** *  This file provides the source code to the API for the CRC component
   7:Generated_Source\PSoC4/CRC.c **** *
   8:Generated_Source\PSoC4/CRC.c **** * Note:
   9:Generated_Source\PSoC4/CRC.c **** *  None
  10:Generated_Source\PSoC4/CRC.c **** *
  11:Generated_Source\PSoC4/CRC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CRC.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/CRC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/CRC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/CRC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/CRC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/CRC.c **** 
  18:Generated_Source\PSoC4/CRC.c **** #include "CRC.h"
  19:Generated_Source\PSoC4/CRC.c **** 
  20:Generated_Source\PSoC4/CRC.c **** uint8 CRC_initVar = 0u;
  21:Generated_Source\PSoC4/CRC.c **** 
  22:Generated_Source\PSoC4/CRC.c **** CRC_BACKUP_STRUCT CRC_backup =
  23:Generated_Source\PSoC4/CRC.c **** {
  24:Generated_Source\PSoC4/CRC.c ****     0x00u, /* enableState; */
  25:Generated_Source\PSoC4/CRC.c **** 
  26:Generated_Source\PSoC4/CRC.c ****     /* Save D0 and D1 registers are none-retention for Panther ES1 */
  27:Generated_Source\PSoC4/CRC.c ****     #if (CY_UDB_V0)
  28:Generated_Source\PSoC4/CRC.c **** 
  29:Generated_Source\PSoC4/CRC.c ****         #if(CRC_CRC_SIZE <= 32u)
  30:Generated_Source\PSoC4/CRC.c ****             CRC_DEFAULT_POLYNOM, /* polynomial; */
  31:Generated_Source\PSoC4/CRC.c **** 
  32:Generated_Source\PSoC4/CRC.c ****         #else
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 2


  33:Generated_Source\PSoC4/CRC.c ****             CRC_DEFAULT_POLYNOM_UPPER, /* polynomialUpper; */
  34:Generated_Source\PSoC4/CRC.c ****             CRC_DEFAULT_POLYNOM_LOWER,  /* polynomialLower; */
  35:Generated_Source\PSoC4/CRC.c **** 
  36:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_CRC_SIZE <= 32u) */
  37:Generated_Source\PSoC4/CRC.c **** 
  38:Generated_Source\PSoC4/CRC.c ****     #endif  /* End (CY_UDB_V0) */
  39:Generated_Source\PSoC4/CRC.c **** };
  40:Generated_Source\PSoC4/CRC.c **** 
  41:Generated_Source\PSoC4/CRC.c **** 
  42:Generated_Source\PSoC4/CRC.c **** /*******************************************************************************
  43:Generated_Source\PSoC4/CRC.c **** * Function Name: CRC_Init
  44:Generated_Source\PSoC4/CRC.c **** ********************************************************************************
  45:Generated_Source\PSoC4/CRC.c **** *
  46:Generated_Source\PSoC4/CRC.c **** * Summary:
  47:Generated_Source\PSoC4/CRC.c **** *  Initializes seed and polynomial registers with initial values.
  48:Generated_Source\PSoC4/CRC.c **** *
  49:Generated_Source\PSoC4/CRC.c **** * Parameters:
  50:Generated_Source\PSoC4/CRC.c **** *  void
  51:Generated_Source\PSoC4/CRC.c **** *
  52:Generated_Source\PSoC4/CRC.c **** * Return:
  53:Generated_Source\PSoC4/CRC.c **** *  void
  54:Generated_Source\PSoC4/CRC.c **** *
  55:Generated_Source\PSoC4/CRC.c **** *******************************************************************************/
  56:Generated_Source\PSoC4/CRC.c **** void CRC_Init(void) 
  57:Generated_Source\PSoC4/CRC.c **** {
  58:Generated_Source\PSoC4/CRC.c ****     /* Writes seed value and ponynom value provided for customizer */
  59:Generated_Source\PSoC4/CRC.c ****     #if (CRC_CRC_SIZE <= 32u)
  60:Generated_Source\PSoC4/CRC.c ****         CRC_WritePolynomial(CRC_DEFAULT_POLYNOM);
  61:Generated_Source\PSoC4/CRC.c ****         CRC_WriteSeed(CRC_DEFAULT_SEED);
  62:Generated_Source\PSoC4/CRC.c ****         CRC_ResetSeedInit(CRC_DEFAULT_SEED);
  63:Generated_Source\PSoC4/CRC.c **** 
  64:Generated_Source\PSoC4/CRC.c ****     #else
  65:Generated_Source\PSoC4/CRC.c ****         CRC_WritePolynomialUpper(CRC_DEFAULT_POLYNOM_UPPER);
  66:Generated_Source\PSoC4/CRC.c ****         CRC_WritePolynomialLower(CRC_DEFAULT_POLYNOM_LOWER);
  67:Generated_Source\PSoC4/CRC.c ****         CRC_WriteSeedUpper(CRC_DEFAULT_SEED_UPPER);
  68:Generated_Source\PSoC4/CRC.c ****         CRC_WriteSeedLower(CRC_DEFAULT_SEED_LOWER);
  69:Generated_Source\PSoC4/CRC.c ****         CRC_ResetSeedInitUpper(CRC_DEFAULT_SEED_UPPER);
  70:Generated_Source\PSoC4/CRC.c ****         CRC_ResetSeedInitLower(CRC_DEFAULT_SEED_LOWER);
  71:Generated_Source\PSoC4/CRC.c **** 
  72:Generated_Source\PSoC4/CRC.c ****     #endif  /* End (CRC_CRC_SIZE <= 32u) */
  73:Generated_Source\PSoC4/CRC.c **** }
  74:Generated_Source\PSoC4/CRC.c **** 
  75:Generated_Source\PSoC4/CRC.c **** 
  76:Generated_Source\PSoC4/CRC.c **** /*******************************************************************************
  77:Generated_Source\PSoC4/CRC.c **** * Function Name: CRC_Enable
  78:Generated_Source\PSoC4/CRC.c **** ********************************************************************************
  79:Generated_Source\PSoC4/CRC.c **** *
  80:Generated_Source\PSoC4/CRC.c **** * Summary:
  81:Generated_Source\PSoC4/CRC.c **** *  Starts CRC computation on rising edge of input clock.
  82:Generated_Source\PSoC4/CRC.c **** *
  83:Generated_Source\PSoC4/CRC.c **** * Parameters:
  84:Generated_Source\PSoC4/CRC.c **** *  void
  85:Generated_Source\PSoC4/CRC.c **** *
  86:Generated_Source\PSoC4/CRC.c **** * Return:
  87:Generated_Source\PSoC4/CRC.c **** *  void
  88:Generated_Source\PSoC4/CRC.c **** *
  89:Generated_Source\PSoC4/CRC.c **** *******************************************************************************/
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 3


  90:Generated_Source\PSoC4/CRC.c **** void CRC_Enable(void) 
  91:Generated_Source\PSoC4/CRC.c **** {
  26              		.loc 1 91 0
  27              		.cfi_startproc
  92:Generated_Source\PSoC4/CRC.c ****     CRC_CONTROL_REG |= CRC_CTRL_ENABLE;
  28              		.loc 1 92 0
  29 0000 024A     		ldr	r2, .L2
  30 0002 1178     		ldrb	r1, [r2]
  31 0004 0123     		mov	r3, #1
  32 0006 0B43     		orr	r3, r1
  33 0008 1370     		strb	r3, [r2]
  93:Generated_Source\PSoC4/CRC.c **** }
  34              		.loc 1 93 0
  35              		@ sp needed
  36 000a 7047     		bx	lr
  37              	.L3:
  38              		.align	2
  39              	.L2:
  40 000c 73000F40 		.word	1074724979
  41              		.cfi_endproc
  42              	.LFE1:
  43              		.size	CRC_Enable, .-CRC_Enable
  44              		.section	.text.CRC_Stop,"ax",%progbits
  45              		.align	2
  46              		.global	CRC_Stop
  47              		.code	16
  48              		.thumb_func
  49              		.type	CRC_Stop, %function
  50              	CRC_Stop:
  51              	.LFB3:
  94:Generated_Source\PSoC4/CRC.c **** 
  95:Generated_Source\PSoC4/CRC.c **** 
  96:Generated_Source\PSoC4/CRC.c **** /*******************************************************************************
  97:Generated_Source\PSoC4/CRC.c **** * Function Name: CRC_Start
  98:Generated_Source\PSoC4/CRC.c **** ********************************************************************************
  99:Generated_Source\PSoC4/CRC.c **** *
 100:Generated_Source\PSoC4/CRC.c **** * Summary:
 101:Generated_Source\PSoC4/CRC.c **** *  Initializes seed and polynomial registers with initial values. Computation
 102:Generated_Source\PSoC4/CRC.c **** *  of CRC starts on rising edge of input clock.
 103:Generated_Source\PSoC4/CRC.c **** *
 104:Generated_Source\PSoC4/CRC.c **** * Parameters:
 105:Generated_Source\PSoC4/CRC.c **** *  void
 106:Generated_Source\PSoC4/CRC.c **** *
 107:Generated_Source\PSoC4/CRC.c **** * Return:
 108:Generated_Source\PSoC4/CRC.c **** *  void
 109:Generated_Source\PSoC4/CRC.c **** *
 110:Generated_Source\PSoC4/CRC.c **** * Global variables:
 111:Generated_Source\PSoC4/CRC.c **** *  CRC_initVar: global variable is used to indicate initial
 112:Generated_Source\PSoC4/CRC.c **** *  configuration of this component.  The variable is initialized to zero and set
 113:Generated_Source\PSoC4/CRC.c **** *  to 1 the first time CRC_Start() is called. This allows
 114:Generated_Source\PSoC4/CRC.c **** *  enable/disable component without re-initialization in all subsequent calls
 115:Generated_Source\PSoC4/CRC.c **** *  to the CRC_Start() routine.
 116:Generated_Source\PSoC4/CRC.c **** *
 117:Generated_Source\PSoC4/CRC.c **** *******************************************************************************/
 118:Generated_Source\PSoC4/CRC.c **** void CRC_Start(void) 
 119:Generated_Source\PSoC4/CRC.c **** {
 120:Generated_Source\PSoC4/CRC.c ****     /* Writes seed value and ponynom value provided from customizer */
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 4


 121:Generated_Source\PSoC4/CRC.c ****     if (CRC_initVar == 0u)
 122:Generated_Source\PSoC4/CRC.c ****     {
 123:Generated_Source\PSoC4/CRC.c ****         CRC_Init();
 124:Generated_Source\PSoC4/CRC.c ****         CRC_initVar = 1u;
 125:Generated_Source\PSoC4/CRC.c ****     }
 126:Generated_Source\PSoC4/CRC.c **** 
 127:Generated_Source\PSoC4/CRC.c ****     CRC_Enable();
 128:Generated_Source\PSoC4/CRC.c **** }
 129:Generated_Source\PSoC4/CRC.c **** 
 130:Generated_Source\PSoC4/CRC.c **** 
 131:Generated_Source\PSoC4/CRC.c **** /*******************************************************************************
 132:Generated_Source\PSoC4/CRC.c **** * Function Name: CRC_Stop
 133:Generated_Source\PSoC4/CRC.c **** ********************************************************************************
 134:Generated_Source\PSoC4/CRC.c **** *
 135:Generated_Source\PSoC4/CRC.c **** * Summary:
 136:Generated_Source\PSoC4/CRC.c **** *  Stops CRC computation.
 137:Generated_Source\PSoC4/CRC.c **** *
 138:Generated_Source\PSoC4/CRC.c **** * Parameters:
 139:Generated_Source\PSoC4/CRC.c **** *  void
 140:Generated_Source\PSoC4/CRC.c **** *
 141:Generated_Source\PSoC4/CRC.c **** * Return:
 142:Generated_Source\PSoC4/CRC.c **** *  void
 143:Generated_Source\PSoC4/CRC.c **** *
 144:Generated_Source\PSoC4/CRC.c **** * Reentrant:
 145:Generated_Source\PSoC4/CRC.c **** *  No
 146:Generated_Source\PSoC4/CRC.c **** *
 147:Generated_Source\PSoC4/CRC.c **** *******************************************************************************/
 148:Generated_Source\PSoC4/CRC.c **** void CRC_Stop(void) 
 149:Generated_Source\PSoC4/CRC.c **** {
  52              		.loc 1 149 0
  53              		.cfi_startproc
 150:Generated_Source\PSoC4/CRC.c ****     CRC_CONTROL_REG &= ((uint8)~CRC_CTRL_ENABLE);
  54              		.loc 1 150 0
  55 0000 024A     		ldr	r2, .L5
  56 0002 1378     		ldrb	r3, [r2]
  57 0004 0121     		mov	r1, #1
  58 0006 8B43     		bic	r3, r1
  59 0008 1370     		strb	r3, [r2]
 151:Generated_Source\PSoC4/CRC.c **** }
  60              		.loc 1 151 0
  61              		@ sp needed
  62 000a 7047     		bx	lr
  63              	.L6:
  64              		.align	2
  65              	.L5:
  66 000c 73000F40 		.word	1074724979
  67              		.cfi_endproc
  68              	.LFE3:
  69              		.size	CRC_Stop, .-CRC_Stop
  70              		.section	.text.CRC_ResetSeedInit,"ax",%progbits
  71              		.align	2
  72              		.global	CRC_ResetSeedInit
  73              		.code	16
  74              		.thumb_func
  75              		.type	CRC_ResetSeedInit, %function
  76              	CRC_ResetSeedInit:
  77              	.LFB4:
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 5


 152:Generated_Source\PSoC4/CRC.c **** 
 153:Generated_Source\PSoC4/CRC.c **** 
 154:Generated_Source\PSoC4/CRC.c **** #if (CRC_CRC_SIZE <= 32u) /* 8-32 bits CRC */
 155:Generated_Source\PSoC4/CRC.c ****     /*******************************************************************************
 156:Generated_Source\PSoC4/CRC.c ****     * FUNCTION NAME: CRC_ResetSeedInit
 157:Generated_Source\PSoC4/CRC.c ****     ********************************************************************************
 158:Generated_Source\PSoC4/CRC.c ****     *
 159:Generated_Source\PSoC4/CRC.c ****     * Summary:
 160:Generated_Source\PSoC4/CRC.c ****     *  Increments the CRC by one when API single step mode is used.
 161:Generated_Source\PSoC4/CRC.c ****     *
 162:Generated_Source\PSoC4/CRC.c ****     * Parameters:
 163:Generated_Source\PSoC4/CRC.c ****     *  void
 164:Generated_Source\PSoC4/CRC.c ****     *
 165:Generated_Source\PSoC4/CRC.c ****     * Return:
 166:Generated_Source\PSoC4/CRC.c ****     *  void
 167:Generated_Source\PSoC4/CRC.c ****     *
 168:Generated_Source\PSoC4/CRC.c ****     *******************************************************************************/
 169:Generated_Source\PSoC4/CRC.c ****     void CRC_ResetSeedInit(uint16 seed)
 170:Generated_Source\PSoC4/CRC.c ****                                         
 171:Generated_Source\PSoC4/CRC.c ****     {
  78              		.loc 1 171 0
  79              		.cfi_startproc
  80              	.LVL0:
  81 0000 10B5     		push	{r4, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 4, -8
  84              		.cfi_offset 14, -4
  85 0002 041C     		mov	r4, r0
 172:Generated_Source\PSoC4/CRC.c ****          uint8 enableInterrupts;
 173:Generated_Source\PSoC4/CRC.c **** 
 174:Generated_Source\PSoC4/CRC.c ****         /* Mask the Seed to cut unused bits */
 175:Generated_Source\PSoC4/CRC.c ****         #if((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u))
 176:Generated_Source\PSoC4/CRC.c ****             seed &= CRC_MASK;
 177:Generated_Source\PSoC4/CRC.c ****         #endif /* ((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u)) */
 178:Generated_Source\PSoC4/CRC.c **** 
 179:Generated_Source\PSoC4/CRC.c ****         /* Change AuxControl reg, need to be safety */
 180:Generated_Source\PSoC4/CRC.c ****         enableInterrupts = CyEnterCriticalSection();
  86              		.loc 1 180 0
  87 0004 FFF7FEFF 		bl	CyEnterCriticalSection
  88              	.LVL1:
 181:Generated_Source\PSoC4/CRC.c **** 
 182:Generated_Source\PSoC4/CRC.c ****         #if (CRC_TIME_MULTIPLEXING_ENABLE)
 183:Generated_Source\PSoC4/CRC.c ****             /* Set FIFOs to single register */
 184:Generated_Source\PSoC4/CRC.c ****             CRC_AUX_CONTROL_A_REG |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 185:Generated_Source\PSoC4/CRC.c **** 
 186:Generated_Source\PSoC4/CRC.c ****             #if(CRC_CRC_SIZE > 16u)       /* 17-32 bits CRC */
 187:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_B_REG |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 188:Generated_Source\PSoC4/CRC.c ****             #endif  /* End (CRC_CRC_SIZE <= 8u) */
 189:Generated_Source\PSoC4/CRC.c **** 
 190:Generated_Source\PSoC4/CRC.c ****             /* AuxControl reg settings are done */
 191:Generated_Source\PSoC4/CRC.c ****             CyExitCriticalSection(enableInterrupts);
 192:Generated_Source\PSoC4/CRC.c **** 
 193:Generated_Source\PSoC4/CRC.c ****             /* Write Seed COPY */
 194:Generated_Source\PSoC4/CRC.c ****             #if (CRC_CRC_SIZE <= 16u)          /* 16 bits CRC */
 195:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_A__A1_REG = HI8(seed);
 196:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_A__A0_REG = LO8(seed);
 197:Generated_Source\PSoC4/CRC.c **** 
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 6


 198:Generated_Source\PSoC4/CRC.c ****             #elif (CRC_CRC_SIZE <= 24u)        /* 24 bits CRC */
 199:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_B__A1_REG = LO8(HI16(seed));
 200:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_B__A0_REG = HI8(seed);
 201:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_A__A0_REG = LO8(seed);
 202:Generated_Source\PSoC4/CRC.c **** 
 203:Generated_Source\PSoC4/CRC.c ****             #else                                           /* 32 bits CRC */
 204:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_B__A1_REG = HI8(HI16(seed));
 205:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_A__A1_REG = LO8(HI16(seed));
 206:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_B__A0_REG = HI8(seed);
 207:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_COPY_A__A0_REG = LO8(seed);
 208:Generated_Source\PSoC4/CRC.c ****             #endif  /* End (CRC_CRC_SIZE <= 32u) */
 209:Generated_Source\PSoC4/CRC.c **** 
 210:Generated_Source\PSoC4/CRC.c ****         #else
 211:Generated_Source\PSoC4/CRC.c ****             /* Set FIFOs to single register */
 212:Generated_Source\PSoC4/CRC.c ****             #if (CRC_CRC_SIZE <= 8u)         /* 8 bits CRC */
 213:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_A_REG |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 214:Generated_Source\PSoC4/CRC.c **** 
 215:Generated_Source\PSoC4/CRC.c ****             #elif (CRC_CRC_SIZE <= 16u)      /* 16 bits CRC */
 216:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_A_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
  89              		.loc 1 216 0
  90 0008 0749     		ldr	r1, .L8
  91 000a 0A78     		ldrb	r2, [r1]
  92 000c 0323     		mov	r3, #3
  93 000e 1A43     		orr	r2, r3
  94 0010 D2B2     		uxtb	r2, r2
  95 0012 0A70     		strb	r2, [r1]
 217:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_B_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
  96              		.loc 1 217 0
  97 0014 054A     		ldr	r2, .L8+4
  98 0016 1178     		ldrb	r1, [r2]
  99 0018 0B43     		orr	r3, r1
 100 001a DBB2     		uxtb	r3, r3
 101 001c 1370     		strb	r3, [r2]
 218:Generated_Source\PSoC4/CRC.c **** 
 219:Generated_Source\PSoC4/CRC.c ****             #elif (CRC_CRC_SIZE <= 24u)      /* 24 bits CRC */
 220:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_A_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 221:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_B_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 222:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_C_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 223:Generated_Source\PSoC4/CRC.c **** 
 224:Generated_Source\PSoC4/CRC.c ****             #elif (CRC_CRC_SIZE <= 32u)      /* 32 bits CRC */
 225:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_A_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 226:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_B_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 227:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_C_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 228:Generated_Source\PSoC4/CRC.c ****                 CRC_AUX_CONTROL_D_REG  |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 229:Generated_Source\PSoC4/CRC.c **** 
 230:Generated_Source\PSoC4/CRC.c ****             #endif  /* End (CRC_CRC_SIZE <= 8u) */
 231:Generated_Source\PSoC4/CRC.c **** 
 232:Generated_Source\PSoC4/CRC.c ****             /* AuxControl reg setting are done */
 233:Generated_Source\PSoC4/CRC.c ****             CyExitCriticalSection(enableInterrupts);
 102              		.loc 1 233 0
 103 001e FFF7FEFF 		bl	CyExitCriticalSection
 104              	.LVL2:
 234:Generated_Source\PSoC4/CRC.c **** 
 235:Generated_Source\PSoC4/CRC.c ****             /* Write Seed COPY */
 236:Generated_Source\PSoC4/CRC.c ****             CY_SET_REG16(CRC_SEED_COPY_PTR, seed);
 105              		.loc 1 236 0
 106 0022 034B     		ldr	r3, .L8+8
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 7


 107 0024 1C80     		strh	r4, [r3]
 237:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_TIME_MULTIPLEXING_ENABLE) */
 238:Generated_Source\PSoC4/CRC.c ****     }
 108              		.loc 1 238 0
 109              		@ sp needed
 110 0026 10BD     		pop	{r4, pc}
 111              	.L9:
 112              		.align	2
 113              	.L8:
 114 0028 92000F40 		.word	1074725010
 115 002c 93000F40 		.word	1074725011
 116 0030 84100F40 		.word	1074729092
 117              		.cfi_endproc
 118              	.LFE4:
 119              		.size	CRC_ResetSeedInit, .-CRC_ResetSeedInit
 120              		.section	.text.CRC_ReadCRC,"ax",%progbits
 121              		.align	2
 122              		.global	CRC_ReadCRC
 123              		.code	16
 124              		.thumb_func
 125              		.type	CRC_ReadCRC, %function
 126              	CRC_ReadCRC:
 127              	.LFB5:
 239:Generated_Source\PSoC4/CRC.c **** 
 240:Generated_Source\PSoC4/CRC.c **** #else
 241:Generated_Source\PSoC4/CRC.c **** 
 242:Generated_Source\PSoC4/CRC.c ****     /*******************************************************************************
 243:Generated_Source\PSoC4/CRC.c ****     * FUNCTION NAME: CRC_ResetSeedInitUpper
 244:Generated_Source\PSoC4/CRC.c ****     ********************************************************************************
 245:Generated_Source\PSoC4/CRC.c ****     *
 246:Generated_Source\PSoC4/CRC.c ****     * Summary:
 247:Generated_Source\PSoC4/CRC.c ****     *  Increments the CRC by one when API single step mode is used.
 248:Generated_Source\PSoC4/CRC.c ****     *
 249:Generated_Source\PSoC4/CRC.c ****     * Parameters:
 250:Generated_Source\PSoC4/CRC.c ****     *  void
 251:Generated_Source\PSoC4/CRC.c ****     *
 252:Generated_Source\PSoC4/CRC.c ****     * Return:
 253:Generated_Source\PSoC4/CRC.c ****     *  void
 254:Generated_Source\PSoC4/CRC.c ****     *
 255:Generated_Source\PSoC4/CRC.c ****     *******************************************************************************/
 256:Generated_Source\PSoC4/CRC.c ****     void CRC_ResetSeedInitUpper(uint32 seed) 
 257:Generated_Source\PSoC4/CRC.c ****     {
 258:Generated_Source\PSoC4/CRC.c ****         uint8 enableInterrupts;
 259:Generated_Source\PSoC4/CRC.c **** 
 260:Generated_Source\PSoC4/CRC.c ****         /* Mask the Seed Upper half to cut unused bits in case, when CRC size is not byte-aligned o
 261:Generated_Source\PSoC4/CRC.c ****         #if((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u))
 262:Generated_Source\PSoC4/CRC.c ****             seed &= CRC_MASK;
 263:Generated_Source\PSoC4/CRC.c ****         #endif /* ((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u)) */
 264:Generated_Source\PSoC4/CRC.c **** 
 265:Generated_Source\PSoC4/CRC.c ****         /* Change AuxControl reg, need to be safety */
 266:Generated_Source\PSoC4/CRC.c ****         enableInterrupts = CyEnterCriticalSection();
 267:Generated_Source\PSoC4/CRC.c **** 
 268:Generated_Source\PSoC4/CRC.c ****         /* Set FIFOs to single register */
 269:Generated_Source\PSoC4/CRC.c ****         CRC_AUX_CONTROL_A_REG |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 270:Generated_Source\PSoC4/CRC.c ****         CRC_AUX_CONTROL_B_REG |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 271:Generated_Source\PSoC4/CRC.c ****         CRC_AUX_CONTROL_C_REG |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 272:Generated_Source\PSoC4/CRC.c **** 
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 8


 273:Generated_Source\PSoC4/CRC.c ****         #if (CRC_CRC_SIZE > 48u)               /* 49-64 bits CRC */
 274:Generated_Source\PSoC4/CRC.c ****             CRC_AUX_CONTROL_D_REG |= CRC_AUXCTRL_FIFO_SINGLE_REG;
 275:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_CRC_SIZE <= 8u) */
 276:Generated_Source\PSoC4/CRC.c **** 
 277:Generated_Source\PSoC4/CRC.c ****         /* AuxControl reg settings are done */
 278:Generated_Source\PSoC4/CRC.c ****         CyExitCriticalSection(enableInterrupts);
 279:Generated_Source\PSoC4/CRC.c **** 
 280:Generated_Source\PSoC4/CRC.c ****         /* Write Seed Upper COPY */
 281:Generated_Source\PSoC4/CRC.c ****         #if (CRC_CRC_SIZE <= 40u)          /* 40 bits CRC */
 282:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_C__A1_REG = LO8(seed);
 283:Generated_Source\PSoC4/CRC.c **** 
 284:Generated_Source\PSoC4/CRC.c ****         #elif (CRC_CRC_SIZE <= 48u)        /* 48 bits CRC */
 285:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_C__A1_REG = HI8(seed);
 286:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_B__A1_REG = LO8(seed);
 287:Generated_Source\PSoC4/CRC.c **** 
 288:Generated_Source\PSoC4/CRC.c ****         #elif (CRC_CRC_SIZE <= 56u)        /* 56 bits CRC */
 289:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_D__A1_REG = LO8(HI16(seed));
 290:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_C__A1_REG = HI8(seed);
 291:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_B__A1_REG = HI8(seed);
 292:Generated_Source\PSoC4/CRC.c **** 
 293:Generated_Source\PSoC4/CRC.c ****         #else                                           /* 64 bits CRC */
 294:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_D__A1_REG = HI8(HI16(seed));
 295:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_C__A1_REG = LO8(HI16(seed));
 296:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_B__A1_REG = HI8(seed);
 297:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_UPPER_COPY_A__A1_REG = LO8(seed);
 298:Generated_Source\PSoC4/CRC.c **** 
 299:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_CRC_SIZE <= 32u) */
 300:Generated_Source\PSoC4/CRC.c ****     }
 301:Generated_Source\PSoC4/CRC.c **** 
 302:Generated_Source\PSoC4/CRC.c **** 
 303:Generated_Source\PSoC4/CRC.c ****     /*******************************************************************************
 304:Generated_Source\PSoC4/CRC.c ****     * FUNCTION NAME: CRC_ResetSeedInitLower
 305:Generated_Source\PSoC4/CRC.c ****     ********************************************************************************
 306:Generated_Source\PSoC4/CRC.c ****     *
 307:Generated_Source\PSoC4/CRC.c ****     * Summary:
 308:Generated_Source\PSoC4/CRC.c ****     *  Increments the CRC by one when API single step mode is used.
 309:Generated_Source\PSoC4/CRC.c ****     *
 310:Generated_Source\PSoC4/CRC.c ****     * Parameters:
 311:Generated_Source\PSoC4/CRC.c ****     *  void
 312:Generated_Source\PSoC4/CRC.c ****     *
 313:Generated_Source\PSoC4/CRC.c ****     * Return:
 314:Generated_Source\PSoC4/CRC.c ****     *  void
 315:Generated_Source\PSoC4/CRC.c ****     *
 316:Generated_Source\PSoC4/CRC.c ****     *******************************************************************************/
 317:Generated_Source\PSoC4/CRC.c ****     void CRC_ResetSeedInitLower(uint32 seed) 
 318:Generated_Source\PSoC4/CRC.c ****     {
 319:Generated_Source\PSoC4/CRC.c ****         /* Write Seed Lower COPY */
 320:Generated_Source\PSoC4/CRC.c ****         #if (CRC_CRC_SIZE <= 40u)          /* 40 bits CRC */
 321:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_B__A1_REG = HI8(HI16(seed));
 322:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_C__A0_REG = LO8(HI16(seed));
 323:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_B__A0_REG = HI8(seed);
 324:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_A__A0_REG = LO8(seed);
 325:Generated_Source\PSoC4/CRC.c **** 
 326:Generated_Source\PSoC4/CRC.c ****         #elif (CRC_CRC_SIZE <= 48u)        /* 48 bits CRC */
 327:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_A__A1_REG = HI8(HI16(seed));
 328:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_C__A0_REG = LO8(HI16(seed));
 329:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_B__A0_REG = HI8(seed);
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 9


 330:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_A__A0_REG = LO8(seed);
 331:Generated_Source\PSoC4/CRC.c **** 
 332:Generated_Source\PSoC4/CRC.c ****         #else                                           /* 64 bits CRC */
 333:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_D__A0_REG = HI8(HI16(seed));
 334:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_C__A0_REG = LO8(HI16(seed));
 335:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_B__A0_REG = HI8(seed);
 336:Generated_Source\PSoC4/CRC.c ****             CRC_SEED_LOWER_COPY_A__A0_REG = LO8(seed);
 337:Generated_Source\PSoC4/CRC.c **** 
 338:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_CRC_SIZE <= 32u) */
 339:Generated_Source\PSoC4/CRC.c ****     }
 340:Generated_Source\PSoC4/CRC.c **** #endif  /* End (CRC_CRC_SIZE <= 32u) */
 341:Generated_Source\PSoC4/CRC.c **** 
 342:Generated_Source\PSoC4/CRC.c **** 
 343:Generated_Source\PSoC4/CRC.c **** #if(CRC_CRC_SIZE <= 32u) /* 8-32 bits CRC */
 344:Generated_Source\PSoC4/CRC.c ****     /*******************************************************************************
 345:Generated_Source\PSoC4/CRC.c ****     * Function Name: CRC_ReadCRC
 346:Generated_Source\PSoC4/CRC.c ****     ********************************************************************************
 347:Generated_Source\PSoC4/CRC.c ****     *
 348:Generated_Source\PSoC4/CRC.c ****     * Summary:
 349:Generated_Source\PSoC4/CRC.c ****     *  Reads CRC value.
 350:Generated_Source\PSoC4/CRC.c ****     *
 351:Generated_Source\PSoC4/CRC.c ****     * Parameters:
 352:Generated_Source\PSoC4/CRC.c ****     *  void
 353:Generated_Source\PSoC4/CRC.c ****     *
 354:Generated_Source\PSoC4/CRC.c ****     * Return:
 355:Generated_Source\PSoC4/CRC.c ****     *  Returns CRC value.
 356:Generated_Source\PSoC4/CRC.c ****     *
 357:Generated_Source\PSoC4/CRC.c ****     * Side Effects:
 358:Generated_Source\PSoC4/CRC.c ****     *  The CRC value is cut according to mask = 2^(Resolution) - 1.
 359:Generated_Source\PSoC4/CRC.c ****     *  For example if CRC Resolution is 14 bits the mask value is:
 360:Generated_Source\PSoC4/CRC.c ****     *  mask = 2^(14) - 1 = 0x3FFFu.
 361:Generated_Source\PSoC4/CRC.c ****     *  The seed value = 0xFFFFu is cut:
 362:Generated_Source\PSoC4/CRC.c ****     *  seed & mask = 0xFFFFu & 0x3FFFu = 0x3FFFu.
 363:Generated_Source\PSoC4/CRC.c ****     *
 364:Generated_Source\PSoC4/CRC.c ****     *******************************************************************************/
 365:Generated_Source\PSoC4/CRC.c ****     uint16 CRC_ReadCRC(void) 
 366:Generated_Source\PSoC4/CRC.c ****     {
 128              		.loc 1 366 0
 129              		.cfi_startproc
 367:Generated_Source\PSoC4/CRC.c ****         /* Read CRC */
 368:Generated_Source\PSoC4/CRC.c ****         #if (CRC_TIME_MULTIPLEXING_ENABLE)
 369:Generated_Source\PSoC4/CRC.c **** 
 370:Generated_Source\PSoC4/CRC.c ****             uint16 seed;
 371:Generated_Source\PSoC4/CRC.c **** 
 372:Generated_Source\PSoC4/CRC.c ****             #if (CRC_CRC_SIZE <= 16u)          /* 16 bits CRC */
 373:Generated_Source\PSoC4/CRC.c ****                 seed = ((uint16) CRC_SEED_A__A1_REG) << 8u;
 374:Generated_Source\PSoC4/CRC.c ****                 seed |= CRC_SEED_A__A0_REG;
 375:Generated_Source\PSoC4/CRC.c **** 
 376:Generated_Source\PSoC4/CRC.c ****             #elif (CRC_CRC_SIZE <= 24u)        /* 24 bits CRC */
 377:Generated_Source\PSoC4/CRC.c ****                 seed = ((uint32) (CRC_SEED_B__A1_REG)) << 16u;
 378:Generated_Source\PSoC4/CRC.c ****                 seed |= ((uint32) (CRC_SEED_B__A0_REG)) << 8u;
 379:Generated_Source\PSoC4/CRC.c ****                 seed |= CRC_SEED_A__A0_REG;
 380:Generated_Source\PSoC4/CRC.c **** 
 381:Generated_Source\PSoC4/CRC.c ****             #else                                           /* 32 bits CRC */
 382:Generated_Source\PSoC4/CRC.c ****                 seed = ((uint32) CRC_SEED_B__A1_REG) << 24u;
 383:Generated_Source\PSoC4/CRC.c ****                 seed |= ((uint32) CRC_SEED_A__A1_REG) << 16u;
 384:Generated_Source\PSoC4/CRC.c ****                 seed |= ((uint32) CRC_SEED_B__A0_REG) << 8u;
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 10


 385:Generated_Source\PSoC4/CRC.c ****                 seed |= CRC_SEED_A__A0_REG;
 386:Generated_Source\PSoC4/CRC.c **** 
 387:Generated_Source\PSoC4/CRC.c ****             #endif  /* End (CRC_CRC_SIZE <= 8u) */
 388:Generated_Source\PSoC4/CRC.c ****             
 389:Generated_Source\PSoC4/CRC.c ****             #if((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u))
 390:Generated_Source\PSoC4/CRC.c ****                 seed &= CRC_MASK;
 391:Generated_Source\PSoC4/CRC.c ****             #endif /* ((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u)) */
 392:Generated_Source\PSoC4/CRC.c ****             
 393:Generated_Source\PSoC4/CRC.c ****             return (seed);
 394:Generated_Source\PSoC4/CRC.c **** 
 395:Generated_Source\PSoC4/CRC.c ****         #else
 396:Generated_Source\PSoC4/CRC.c ****             
 397:Generated_Source\PSoC4/CRC.c ****             #if((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u))
 398:Generated_Source\PSoC4/CRC.c ****                 return (CY_GET_REG16(CRC_SEED_PTR)  & CRC_MASK);
 399:Generated_Source\PSoC4/CRC.c ****             #else
 400:Generated_Source\PSoC4/CRC.c ****                 return (CY_GET_REG16(CRC_SEED_PTR));
 130              		.loc 1 400 0
 131 0000 014B     		ldr	r3, .L11
 132 0002 1888     		ldrh	r0, [r3]
 133 0004 80B2     		uxth	r0, r0
 401:Generated_Source\PSoC4/CRC.c ****             #endif /* ((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u)) */
 402:Generated_Source\PSoC4/CRC.c ****             
 403:Generated_Source\PSoC4/CRC.c **** 
 404:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_TIME_MULTIPLEXING_ENABLE) */
 405:Generated_Source\PSoC4/CRC.c ****     }
 134              		.loc 1 405 0
 135              		@ sp needed
 136 0006 7047     		bx	lr
 137              	.L12:
 138              		.align	2
 139              	.L11:
 140 0008 04100F40 		.word	1074728964
 141              		.cfi_endproc
 142              	.LFE5:
 143              		.size	CRC_ReadCRC, .-CRC_ReadCRC
 144              		.section	.text.CRC_WriteSeed,"ax",%progbits
 145              		.align	2
 146              		.global	CRC_WriteSeed
 147              		.code	16
 148              		.thumb_func
 149              		.type	CRC_WriteSeed, %function
 150              	CRC_WriteSeed:
 151              	.LFB6:
 406:Generated_Source\PSoC4/CRC.c **** 
 407:Generated_Source\PSoC4/CRC.c **** 
 408:Generated_Source\PSoC4/CRC.c ****     /*******************************************************************************
 409:Generated_Source\PSoC4/CRC.c ****     * Function Name: CRC_WriteSeed
 410:Generated_Source\PSoC4/CRC.c ****     ********************************************************************************
 411:Generated_Source\PSoC4/CRC.c ****     *
 412:Generated_Source\PSoC4/CRC.c ****     * Summary:
 413:Generated_Source\PSoC4/CRC.c ****     *  Writes seed value.
 414:Generated_Source\PSoC4/CRC.c ****     *
 415:Generated_Source\PSoC4/CRC.c ****     * Parameters:
 416:Generated_Source\PSoC4/CRC.c ****     *  seed:  Seed value.
 417:Generated_Source\PSoC4/CRC.c ****     *
 418:Generated_Source\PSoC4/CRC.c ****     * Return:
 419:Generated_Source\PSoC4/CRC.c ****     *  void
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 11


 420:Generated_Source\PSoC4/CRC.c ****     *
 421:Generated_Source\PSoC4/CRC.c ****     * Side Effects:
 422:Generated_Source\PSoC4/CRC.c ****     *  The seed value is cut according to mask = 2^(Resolution) - 1.
 423:Generated_Source\PSoC4/CRC.c ****     *  For example if CRC Resolution is 14 bits the mask value is:
 424:Generated_Source\PSoC4/CRC.c ****     *  mask = 2^(14) - 1 = 0x3FFFu.
 425:Generated_Source\PSoC4/CRC.c ****     *  The seed value = 0xFFFFu is cut:
 426:Generated_Source\PSoC4/CRC.c ****     *  seed & mask = 0xFFFFu & 0x3FFFu = 0x3FFFu.
 427:Generated_Source\PSoC4/CRC.c ****     *
 428:Generated_Source\PSoC4/CRC.c ****     *******************************************************************************/
 429:Generated_Source\PSoC4/CRC.c ****     void CRC_WriteSeed(uint16 seed) 
 430:Generated_Source\PSoC4/CRC.c ****     {
 152              		.loc 1 430 0
 153              		.cfi_startproc
 154              	.LVL3:
 431:Generated_Source\PSoC4/CRC.c ****         /* Mask the Seed Upper half to cut unused bits in case, when CRC size is not byte-aligned o
 432:Generated_Source\PSoC4/CRC.c ****         #if((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u))
 433:Generated_Source\PSoC4/CRC.c ****             seed &= CRC_MASK;
 434:Generated_Source\PSoC4/CRC.c ****         #endif /* ((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u)) */
 435:Generated_Source\PSoC4/CRC.c **** 
 436:Generated_Source\PSoC4/CRC.c ****         /* Writes Seed */
 437:Generated_Source\PSoC4/CRC.c ****         #if (CRC_TIME_MULTIPLEXING_ENABLE)
 438:Generated_Source\PSoC4/CRC.c **** 
 439:Generated_Source\PSoC4/CRC.c ****             #if (CRC_CRC_SIZE <= 16u)          /* 16 bits CRC */
 440:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_A__A1_REG = HI8(seed);
 441:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_A__A0_REG = LO8(seed);
 442:Generated_Source\PSoC4/CRC.c **** 
 443:Generated_Source\PSoC4/CRC.c ****             #elif (CRC_CRC_SIZE <= 24u)        /* 24 bits CRC */
 444:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_B__A1_REG = LO8(HI16(seed));
 445:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_B__A0_REG = HI8(seed);
 446:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_A__A0_REG = LO8(seed);
 447:Generated_Source\PSoC4/CRC.c **** 
 448:Generated_Source\PSoC4/CRC.c ****             #else                                           /* 32 bits CRC */
 449:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_B__A1_REG = HI8(HI16(seed));
 450:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_A__A1_REG = LO8(HI16(seed));
 451:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_B__A0_REG = HI8(seed);
 452:Generated_Source\PSoC4/CRC.c ****                 CRC_SEED_A__A0_REG = LO8(seed);
 453:Generated_Source\PSoC4/CRC.c ****             #endif  /* End (CRC_CRC_SIZE <= 32u) */
 454:Generated_Source\PSoC4/CRC.c **** 
 455:Generated_Source\PSoC4/CRC.c ****             /* Resets triggers */
 456:Generated_Source\PSoC4/CRC.c ****             CRC_EXECUTE_DFF_RESET;
 457:Generated_Source\PSoC4/CRC.c **** 
 458:Generated_Source\PSoC4/CRC.c ****         #else
 459:Generated_Source\PSoC4/CRC.c **** 
 460:Generated_Source\PSoC4/CRC.c ****             CY_SET_REG16(CRC_SEED_PTR, seed);
 155              		.loc 1 460 0
 156 0000 014B     		ldr	r3, .L14
 157 0002 1880     		strh	r0, [r3]
 461:Generated_Source\PSoC4/CRC.c **** 
 462:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_TIME_MULTIPLEXING_ENABLE) */
 463:Generated_Source\PSoC4/CRC.c ****     }
 158              		.loc 1 463 0
 159              		@ sp needed
 160 0004 7047     		bx	lr
 161              	.L15:
 162 0006 C046     		.align	2
 163              	.L14:
 164 0008 04100F40 		.word	1074728964
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 12


 165              		.cfi_endproc
 166              	.LFE6:
 167              		.size	CRC_WriteSeed, .-CRC_WriteSeed
 168              		.section	.text.CRC_ReadPolynomial,"ax",%progbits
 169              		.align	2
 170              		.global	CRC_ReadPolynomial
 171              		.code	16
 172              		.thumb_func
 173              		.type	CRC_ReadPolynomial, %function
 174              	CRC_ReadPolynomial:
 175              	.LFB7:
 464:Generated_Source\PSoC4/CRC.c **** 
 465:Generated_Source\PSoC4/CRC.c **** 
 466:Generated_Source\PSoC4/CRC.c ****     /*******************************************************************************
 467:Generated_Source\PSoC4/CRC.c ****     * Function Name: CRC_ReadPolynomial
 468:Generated_Source\PSoC4/CRC.c ****     ********************************************************************************
 469:Generated_Source\PSoC4/CRC.c ****     *
 470:Generated_Source\PSoC4/CRC.c ****     * Summary:
 471:Generated_Source\PSoC4/CRC.c ****     *  Reads CRC polynomial value.
 472:Generated_Source\PSoC4/CRC.c ****     *
 473:Generated_Source\PSoC4/CRC.c ****     * Parameters:
 474:Generated_Source\PSoC4/CRC.c ****     *  void
 475:Generated_Source\PSoC4/CRC.c ****     *
 476:Generated_Source\PSoC4/CRC.c ****     * Return:
 477:Generated_Source\PSoC4/CRC.c ****     *  Returns CRC polynomial value.
 478:Generated_Source\PSoC4/CRC.c ****     *
 479:Generated_Source\PSoC4/CRC.c ****     *******************************************************************************/
 480:Generated_Source\PSoC4/CRC.c ****     uint16 CRC_ReadPolynomial(void)
 481:Generated_Source\PSoC4/CRC.c ****                                                
 482:Generated_Source\PSoC4/CRC.c ****     {
 176              		.loc 1 482 0
 177              		.cfi_startproc
 483:Generated_Source\PSoC4/CRC.c ****         /* Reads polynomial */
 484:Generated_Source\PSoC4/CRC.c ****         #if (CRC_TIME_MULTIPLEXING_ENABLE)
 485:Generated_Source\PSoC4/CRC.c **** 
 486:Generated_Source\PSoC4/CRC.c ****             uint16 polynomial;
 487:Generated_Source\PSoC4/CRC.c **** 
 488:Generated_Source\PSoC4/CRC.c ****             #if (CRC_CRC_SIZE <= 16u)          /* 16 bits CRC */
 489:Generated_Source\PSoC4/CRC.c ****                 polynomial = ((uint16) CRC_POLYNOM_A__D1_REG) << 8u;
 490:Generated_Source\PSoC4/CRC.c ****                 polynomial |= (CRC_POLYNOM_A__D0_REG);
 491:Generated_Source\PSoC4/CRC.c **** 
 492:Generated_Source\PSoC4/CRC.c ****             #elif (CRC_CRC_SIZE <= 24u)        /* 24 bits CRC */
 493:Generated_Source\PSoC4/CRC.c ****                 polynomial = ((uint32) CRC_POLYNOM_B__D1_REG) << 16u;
 494:Generated_Source\PSoC4/CRC.c ****                 polynomial |= ((uint32) CRC_POLYNOM_B__D0_REG) << 8u;
 495:Generated_Source\PSoC4/CRC.c ****                 polynomial |= CRC_POLYNOM_A__D0_REG;
 496:Generated_Source\PSoC4/CRC.c **** 
 497:Generated_Source\PSoC4/CRC.c ****             #else                                           /* 32 bits CRC */
 498:Generated_Source\PSoC4/CRC.c ****                 polynomial = ((uint32) CRC_POLYNOM_B__D1_REG) << 24u;
 499:Generated_Source\PSoC4/CRC.c ****                 polynomial |= ((uint32) CRC_POLYNOM_A__D1_REG) << 16u;
 500:Generated_Source\PSoC4/CRC.c ****                 polynomial |= ((uint32) CRC_POLYNOM_B__D0_REG) << 8u;
 501:Generated_Source\PSoC4/CRC.c ****                 polynomial |= CRC_POLYNOM_A__D0_REG;
 502:Generated_Source\PSoC4/CRC.c **** 
 503:Generated_Source\PSoC4/CRC.c ****             #endif  /* End (CRC_CRC_SIZE <= 32u) */
 504:Generated_Source\PSoC4/CRC.c **** 
 505:Generated_Source\PSoC4/CRC.c ****             return polynomial;
 506:Generated_Source\PSoC4/CRC.c **** 
 507:Generated_Source\PSoC4/CRC.c ****         #else
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 13


 508:Generated_Source\PSoC4/CRC.c **** 
 509:Generated_Source\PSoC4/CRC.c ****             return CY_GET_REG16(CRC_POLYNOM_PTR);
 178              		.loc 1 509 0
 179 0000 014B     		ldr	r3, .L17
 180 0002 1888     		ldrh	r0, [r3]
 181 0004 80B2     		uxth	r0, r0
 510:Generated_Source\PSoC4/CRC.c **** 
 511:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_TIME_MULTIPLEXING_ENABLE) */
 512:Generated_Source\PSoC4/CRC.c ****     }
 182              		.loc 1 512 0
 183              		@ sp needed
 184 0006 7047     		bx	lr
 185              	.L18:
 186              		.align	2
 187              	.L17:
 188 0008 44100F40 		.word	1074729028
 189              		.cfi_endproc
 190              	.LFE7:
 191              		.size	CRC_ReadPolynomial, .-CRC_ReadPolynomial
 192              		.section	.text.CRC_WritePolynomial,"ax",%progbits
 193              		.align	2
 194              		.global	CRC_WritePolynomial
 195              		.code	16
 196              		.thumb_func
 197              		.type	CRC_WritePolynomial, %function
 198              	CRC_WritePolynomial:
 199              	.LFB8:
 513:Generated_Source\PSoC4/CRC.c **** 
 514:Generated_Source\PSoC4/CRC.c **** 
 515:Generated_Source\PSoC4/CRC.c ****     /*******************************************************************************
 516:Generated_Source\PSoC4/CRC.c ****     * Function Name: CRC_WritePolynomial
 517:Generated_Source\PSoC4/CRC.c ****     ********************************************************************************
 518:Generated_Source\PSoC4/CRC.c ****     *
 519:Generated_Source\PSoC4/CRC.c ****     * Summary:
 520:Generated_Source\PSoC4/CRC.c ****     *  Writes CRC polynomial value.
 521:Generated_Source\PSoC4/CRC.c ****     *
 522:Generated_Source\PSoC4/CRC.c ****     * Parameters:
 523:Generated_Source\PSoC4/CRC.c ****     *  polynomial:  CRC polynomial.
 524:Generated_Source\PSoC4/CRC.c ****     *
 525:Generated_Source\PSoC4/CRC.c ****     * Return:
 526:Generated_Source\PSoC4/CRC.c ****     *  void
 527:Generated_Source\PSoC4/CRC.c ****     *
 528:Generated_Source\PSoC4/CRC.c ****     * Side Effects:
 529:Generated_Source\PSoC4/CRC.c ****     *  The polynomial value is cut according to mask = 2^(Resolution) - 1.
 530:Generated_Source\PSoC4/CRC.c ****     *  For example if CRC Resolution is 14 bits the mask value is:
 531:Generated_Source\PSoC4/CRC.c ****     *  mask = 2^(14) - 1 = 0x3FFFu.
 532:Generated_Source\PSoC4/CRC.c ****     *  The polynomial value = 0xFFFFu is cut:
 533:Generated_Source\PSoC4/CRC.c ****     *  polynomial & mask = 0xFFFFu & 0x3FFFu = 0x3FFFu.
 534:Generated_Source\PSoC4/CRC.c ****     *
 535:Generated_Source\PSoC4/CRC.c ****     *******************************************************************************/
 536:Generated_Source\PSoC4/CRC.c ****     void CRC_WritePolynomial(uint16 polynomial)
 537:Generated_Source\PSoC4/CRC.c ****                                           
 538:Generated_Source\PSoC4/CRC.c ****     {
 200              		.loc 1 538 0
 201              		.cfi_startproc
 202              	.LVL4:
 539:Generated_Source\PSoC4/CRC.c ****         /* Mask polynomial to cut unused bits in case, when CRC size is not byte-aligned or equal 2
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 14


 540:Generated_Source\PSoC4/CRC.c ****         #if((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u))
 541:Generated_Source\PSoC4/CRC.c ****             polynomial &= CRC_MASK;
 542:Generated_Source\PSoC4/CRC.c ****         #endif /* ((0u != (CRC_CRC_SIZE % 8u)) || (CRC_CRC_SIZE == 24u)) */
 543:Generated_Source\PSoC4/CRC.c **** 
 544:Generated_Source\PSoC4/CRC.c ****         /* Write polynomial */
 545:Generated_Source\PSoC4/CRC.c ****         #if (CRC_TIME_MULTIPLEXING_ENABLE)
 546:Generated_Source\PSoC4/CRC.c **** 
 547:Generated_Source\PSoC4/CRC.c ****             #if (CRC_CRC_SIZE <= 16u)          /* 16 bits CRC */
 548:Generated_Source\PSoC4/CRC.c **** 
 549:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_A__D1_REG = HI8(polynomial);
 550:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_A__D0_REG = LO8(polynomial);
 551:Generated_Source\PSoC4/CRC.c **** 
 552:Generated_Source\PSoC4/CRC.c ****             #elif (CRC_CRC_SIZE <= 24u)        /* 24 bits CRC */
 553:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_B__D1_REG = LO8(HI16(polynomial));
 554:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_B__D0_REG = HI8(polynomial);
 555:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_A__D0_REG = LO8(polynomial);
 556:Generated_Source\PSoC4/CRC.c **** 
 557:Generated_Source\PSoC4/CRC.c ****             #else                                           /* 32 bits CRC */
 558:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_B__D1_REG = HI8(HI16(polynomial));
 559:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_A__D1_REG = LO8(HI16(polynomial));
 560:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_B__D0_REG = HI8(polynomial);
 561:Generated_Source\PSoC4/CRC.c ****                 CRC_POLYNOM_A__D0_REG = LO8(polynomial);
 562:Generated_Source\PSoC4/CRC.c **** 
 563:Generated_Source\PSoC4/CRC.c ****             #endif  /* End (CRC_CRC_SIZE <= 32u) */
 564:Generated_Source\PSoC4/CRC.c **** 
 565:Generated_Source\PSoC4/CRC.c ****             /* Resets triggers */
 566:Generated_Source\PSoC4/CRC.c ****             CRC_EXECUTE_DFF_RESET;
 567:Generated_Source\PSoC4/CRC.c **** 
 568:Generated_Source\PSoC4/CRC.c ****         #else
 569:Generated_Source\PSoC4/CRC.c **** 
 570:Generated_Source\PSoC4/CRC.c ****             CY_SET_REG16(CRC_POLYNOM_PTR, polynomial);
 203              		.loc 1 570 0
 204 0000 014B     		ldr	r3, .L20
 205 0002 1880     		strh	r0, [r3]
 571:Generated_Source\PSoC4/CRC.c **** 
 572:Generated_Source\PSoC4/CRC.c ****         #endif  /* End (CRC_TIME_MULTIPLEXING_ENABLE) */
 573:Generated_Source\PSoC4/CRC.c ****     }
 206              		.loc 1 573 0
 207              		@ sp needed
 208 0004 7047     		bx	lr
 209              	.L21:
 210 0006 C046     		.align	2
 211              	.L20:
 212 0008 44100F40 		.word	1074729028
 213              		.cfi_endproc
 214              	.LFE8:
 215              		.size	CRC_WritePolynomial, .-CRC_WritePolynomial
 216              		.section	.text.CRC_Init,"ax",%progbits
 217              		.align	2
 218              		.global	CRC_Init
 219              		.code	16
 220              		.thumb_func
 221              		.type	CRC_Init, %function
 222              	CRC_Init:
 223              	.LFB0:
  57:Generated_Source\PSoC4/CRC.c ****     /* Writes seed value and ponynom value provided for customizer */
 224              		.loc 1 57 0
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 15


 225              		.cfi_startproc
 226 0000 08B5     		push	{r3, lr}
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 3, -8
 229              		.cfi_offset 14, -4
  60:Generated_Source\PSoC4/CRC.c ****         CRC_WriteSeed(CRC_DEFAULT_SEED);
 230              		.loc 1 60 0
 231 0002 0548     		ldr	r0, .L23
 232 0004 FFF7FEFF 		bl	CRC_WritePolynomial
 233              	.LVL5:
  61:Generated_Source\PSoC4/CRC.c ****         CRC_ResetSeedInit(CRC_DEFAULT_SEED);
 234              		.loc 1 61 0
 235 0008 0020     		mov	r0, #0
 236 000a FFF7FEFF 		bl	CRC_WriteSeed
 237              	.LVL6:
  62:Generated_Source\PSoC4/CRC.c **** 
 238              		.loc 1 62 0
 239 000e 0020     		mov	r0, #0
 240 0010 FFF7FEFF 		bl	CRC_ResetSeedInit
 241              	.LVL7:
  73:Generated_Source\PSoC4/CRC.c **** 
 242              		.loc 1 73 0
 243              		@ sp needed
 244 0014 08BD     		pop	{r3, pc}
 245              	.L24:
 246 0016 C046     		.align	2
 247              	.L23:
 248 0018 02C00000 		.word	49154
 249              		.cfi_endproc
 250              	.LFE0:
 251              		.size	CRC_Init, .-CRC_Init
 252              		.section	.text.CRC_Start,"ax",%progbits
 253              		.align	2
 254              		.global	CRC_Start
 255              		.code	16
 256              		.thumb_func
 257              		.type	CRC_Start, %function
 258              	CRC_Start:
 259              	.LFB2:
 119:Generated_Source\PSoC4/CRC.c ****     /* Writes seed value and ponynom value provided from customizer */
 260              		.loc 1 119 0
 261              		.cfi_startproc
 262 0000 08B5     		push	{r3, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 3, -8
 265              		.cfi_offset 14, -4
 121:Generated_Source\PSoC4/CRC.c ****     {
 266              		.loc 1 121 0
 267 0002 064B     		ldr	r3, .L27
 268 0004 1B78     		ldrb	r3, [r3]
 269 0006 002B     		cmp	r3, #0
 270 0008 04D1     		bne	.L26
 123:Generated_Source\PSoC4/CRC.c ****         CRC_initVar = 1u;
 271              		.loc 1 123 0
 272 000a FFF7FEFF 		bl	CRC_Init
 273              	.LVL8:
 124:Generated_Source\PSoC4/CRC.c ****     }
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 16


 274              		.loc 1 124 0
 275 000e 0122     		mov	r2, #1
 276 0010 024B     		ldr	r3, .L27
 277 0012 1A70     		strb	r2, [r3]
 278              	.L26:
 127:Generated_Source\PSoC4/CRC.c **** }
 279              		.loc 1 127 0
 280 0014 FFF7FEFF 		bl	CRC_Enable
 281              	.LVL9:
 128:Generated_Source\PSoC4/CRC.c **** 
 282              		.loc 1 128 0
 283              		@ sp needed
 284 0018 08BD     		pop	{r3, pc}
 285              	.L28:
 286 001a C046     		.align	2
 287              	.L27:
 288 001c 00000000 		.word	.LANCHOR0
 289              		.cfi_endproc
 290              	.LFE2:
 291              		.size	CRC_Start, .-CRC_Start
 292              		.global	CRC_backup
 293              		.global	CRC_initVar
 294              		.bss
 295              		.align	2
 296              		.set	.LANCHOR0,. + 0
 297              		.type	CRC_initVar, %object
 298              		.size	CRC_initVar, 1
 299              	CRC_initVar:
 300 0000 00       		.space	1
 301 0001 000000   		.space	3
 302              		.type	CRC_backup, %object
 303              		.size	CRC_backup, 1
 304              	CRC_backup:
 305 0004 00       		.space	1
 306 0005 000000   		.text
 307              	.Letext0:
 308              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 309              		.file 3 "Generated_Source\\PSoC4\\CRC.h"
 310              		.file 4 "Generated_Source\\PSoC4\\CyLib.h"
 311              		.section	.debug_info,"",%progbits
 312              	.Ldebug_info0:
 313 0000 6B020000 		.4byte	0x26b
 314 0004 0400     		.2byte	0x4
 315 0006 00000000 		.4byte	.Ldebug_abbrev0
 316 000a 04       		.byte	0x4
 317 000b 01       		.uleb128 0x1
 318 000c BA010000 		.4byte	.LASF31
 319 0010 01       		.byte	0x1
 320 0011 88000000 		.4byte	.LASF32
 321 0015 31000000 		.4byte	.LASF33
 322 0019 00000000 		.4byte	.Ldebug_ranges0+0
 323 001d 00000000 		.4byte	0
 324 0021 00000000 		.4byte	.Ldebug_line0
 325 0025 02       		.uleb128 0x2
 326 0026 01       		.byte	0x1
 327 0027 06       		.byte	0x6
 328 0028 84020000 		.4byte	.LASF0
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 17


 329 002c 02       		.uleb128 0x2
 330 002d 01       		.byte	0x1
 331 002e 08       		.byte	0x8
 332 002f E6000000 		.4byte	.LASF1
 333 0033 02       		.uleb128 0x2
 334 0034 02       		.byte	0x2
 335 0035 05       		.byte	0x5
 336 0036 48020000 		.4byte	.LASF2
 337 003a 02       		.uleb128 0x2
 338 003b 02       		.byte	0x2
 339 003c 07       		.byte	0x7
 340 003d 62000000 		.4byte	.LASF3
 341 0041 02       		.uleb128 0x2
 342 0042 04       		.byte	0x4
 343 0043 05       		.byte	0x5
 344 0044 6F020000 		.4byte	.LASF4
 345 0048 02       		.uleb128 0x2
 346 0049 04       		.byte	0x4
 347 004a 07       		.byte	0x7
 348 004b 05010000 		.4byte	.LASF5
 349 004f 02       		.uleb128 0x2
 350 0050 08       		.byte	0x8
 351 0051 05       		.byte	0x5
 352 0052 9E010000 		.4byte	.LASF6
 353 0056 02       		.uleb128 0x2
 354 0057 08       		.byte	0x8
 355 0058 07       		.byte	0x7
 356 0059 CF000000 		.4byte	.LASF7
 357 005d 03       		.uleb128 0x3
 358 005e 04       		.byte	0x4
 359 005f 05       		.byte	0x5
 360 0060 696E7400 		.ascii	"int\000"
 361 0064 02       		.uleb128 0x2
 362 0065 04       		.byte	0x4
 363 0066 07       		.byte	0x7
 364 0067 67010000 		.4byte	.LASF8
 365 006b 04       		.uleb128 0x4
 366 006c 17010000 		.4byte	.LASF9
 367 0070 02       		.byte	0x2
 368 0071 B901     		.2byte	0x1b9
 369 0073 2C000000 		.4byte	0x2c
 370 0077 04       		.uleb128 0x4
 371 0078 49010000 		.4byte	.LASF10
 372 007c 02       		.byte	0x2
 373 007d BA01     		.2byte	0x1ba
 374 007f 3A000000 		.4byte	0x3a
 375 0083 02       		.uleb128 0x2
 376 0084 04       		.byte	0x4
 377 0085 04       		.byte	0x4
 378 0086 B7000000 		.4byte	.LASF11
 379 008a 02       		.uleb128 0x2
 380 008b 08       		.byte	0x8
 381 008c 04       		.byte	0x4
 382 008d 37010000 		.4byte	.LASF12
 383 0091 02       		.uleb128 0x2
 384 0092 01       		.byte	0x1
 385 0093 08       		.byte	0x8
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 18


 386 0094 AC010000 		.4byte	.LASF13
 387 0098 04       		.uleb128 0x4
 388 0099 F4000000 		.4byte	.LASF14
 389 009d 02       		.byte	0x2
 390 009e 6302     		.2byte	0x263
 391 00a0 A4000000 		.4byte	0xa4
 392 00a4 05       		.uleb128 0x5
 393 00a5 6B000000 		.4byte	0x6b
 394 00a9 04       		.uleb128 0x4
 395 00aa 00000000 		.4byte	.LASF15
 396 00ae 02       		.byte	0x2
 397 00af 6402     		.2byte	0x264
 398 00b1 B5000000 		.4byte	0xb5
 399 00b5 05       		.uleb128 0x5
 400 00b6 77000000 		.4byte	0x77
 401 00ba 02       		.uleb128 0x2
 402 00bb 04       		.byte	0x4
 403 00bc 07       		.byte	0x7
 404 00bd 95010000 		.4byte	.LASF16
 405 00c1 06       		.uleb128 0x6
 406 00c2 01       		.byte	0x1
 407 00c3 03       		.byte	0x3
 408 00c4 2E       		.byte	0x2e
 409 00c5 D6000000 		.4byte	0xd6
 410 00c9 07       		.uleb128 0x7
 411 00ca 78020000 		.4byte	.LASF34
 412 00ce 03       		.byte	0x3
 413 00cf 30       		.byte	0x30
 414 00d0 6B000000 		.4byte	0x6b
 415 00d4 00       		.byte	0
 416 00d5 00       		.byte	0
 417 00d6 08       		.uleb128 0x8
 418 00d7 BD000000 		.4byte	.LASF17
 419 00db 03       		.byte	0x3
 420 00dc 40       		.byte	0x40
 421 00dd C1000000 		.4byte	0xc1
 422 00e1 09       		.uleb128 0x9
 423 00e2 8A010000 		.4byte	.LASF18
 424 00e6 01       		.byte	0x1
 425 00e7 5A       		.byte	0x5a
 426 00e8 00000000 		.4byte	.LFB1
 427 00ec 10000000 		.4byte	.LFE1-.LFB1
 428 00f0 01       		.uleb128 0x1
 429 00f1 9C       		.byte	0x9c
 430 00f2 09       		.uleb128 0x9
 431 00f3 B1010000 		.4byte	.LASF19
 432 00f7 01       		.byte	0x1
 433 00f8 94       		.byte	0x94
 434 00f9 00000000 		.4byte	.LFB3
 435 00fd 10000000 		.4byte	.LFE3-.LFB3
 436 0101 01       		.uleb128 0x1
 437 0102 9C       		.byte	0x9c
 438 0103 0A       		.uleb128 0xa
 439 0104 A5000000 		.4byte	.LASF20
 440 0108 01       		.byte	0x1
 441 0109 A9       		.byte	0xa9
 442 010a 00000000 		.4byte	.LFB4
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 19


 443 010e 34000000 		.4byte	.LFE4-.LFB4
 444 0112 01       		.uleb128 0x1
 445 0113 9C       		.byte	0x9c
 446 0114 49010000 		.4byte	0x149
 447 0118 0B       		.uleb128 0xb
 448 0119 52020000 		.4byte	.LASF22
 449 011d 01       		.byte	0x1
 450 011e A9       		.byte	0xa9
 451 011f 77000000 		.4byte	0x77
 452 0123 00000000 		.4byte	.LLST0
 453 0127 0C       		.uleb128 0xc
 454 0128 26010000 		.4byte	.LASF35
 455 012c 01       		.byte	0x1
 456 012d AC       		.byte	0xac
 457 012e 6B000000 		.4byte	0x6b
 458 0132 21000000 		.4byte	.LLST1
 459 0136 0D       		.uleb128 0xd
 460 0137 08000000 		.4byte	.LVL1
 461 013b 56020000 		.4byte	0x256
 462 013f 0D       		.uleb128 0xd
 463 0140 22000000 		.4byte	.LVL2
 464 0144 61020000 		.4byte	0x261
 465 0148 00       		.byte	0
 466 0149 0E       		.uleb128 0xe
 467 014a F9000000 		.4byte	.LASF23
 468 014e 01       		.byte	0x1
 469 014f 6D01     		.2byte	0x16d
 470 0151 77000000 		.4byte	0x77
 471 0155 00000000 		.4byte	.LFB5
 472 0159 0C000000 		.4byte	.LFE5-.LFB5
 473 015d 01       		.uleb128 0x1
 474 015e 9C       		.byte	0x9c
 475 015f 0F       		.uleb128 0xf
 476 0160 57020000 		.4byte	.LASF21
 477 0164 01       		.byte	0x1
 478 0165 AD01     		.2byte	0x1ad
 479 0167 00000000 		.4byte	.LFB6
 480 016b 0C000000 		.4byte	.LFE6-.LFB6
 481 016f 01       		.uleb128 0x1
 482 0170 9C       		.byte	0x9c
 483 0171 84010000 		.4byte	0x184
 484 0175 10       		.uleb128 0x10
 485 0176 52020000 		.4byte	.LASF22
 486 017a 01       		.byte	0x1
 487 017b AD01     		.2byte	0x1ad
 488 017d 77000000 		.4byte	0x77
 489 0181 01       		.uleb128 0x1
 490 0182 50       		.byte	0x50
 491 0183 00       		.byte	0
 492 0184 0E       		.uleb128 0xe
 493 0185 75000000 		.4byte	.LASF24
 494 0189 01       		.byte	0x1
 495 018a E001     		.2byte	0x1e0
 496 018c 77000000 		.4byte	0x77
 497 0190 00000000 		.4byte	.LFB7
 498 0194 0C000000 		.4byte	.LFE7-.LFB7
 499 0198 01       		.uleb128 0x1
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 20


 500 0199 9C       		.byte	0x9c
 501 019a 0F       		.uleb128 0xf
 502 019b 1D000000 		.4byte	.LASF25
 503 019f 01       		.byte	0x1
 504 01a0 1802     		.2byte	0x218
 505 01a2 00000000 		.4byte	.LFB8
 506 01a6 0C000000 		.4byte	.LFE8-.LFB8
 507 01aa 01       		.uleb128 0x1
 508 01ab 9C       		.byte	0x9c
 509 01ac BF010000 		.4byte	0x1bf
 510 01b0 10       		.uleb128 0x10
 511 01b1 3E010000 		.4byte	.LASF26
 512 01b5 01       		.byte	0x1
 513 01b6 1802     		.2byte	0x218
 514 01b8 77000000 		.4byte	0x77
 515 01bc 01       		.uleb128 0x1
 516 01bd 50       		.byte	0x50
 517 01be 00       		.byte	0
 518 01bf 0A       		.uleb128 0xa
 519 01c0 1D010000 		.4byte	.LASF27
 520 01c4 01       		.byte	0x1
 521 01c5 38       		.byte	0x38
 522 01c6 00000000 		.4byte	.LFB0
 523 01ca 1C000000 		.4byte	.LFE0-.LFB0
 524 01ce 01       		.uleb128 0x1
 525 01cf 9C       		.byte	0x9c
 526 01d0 0C020000 		.4byte	0x20c
 527 01d4 11       		.uleb128 0x11
 528 01d5 08000000 		.4byte	.LVL5
 529 01d9 9A010000 		.4byte	0x19a
 530 01dd E9010000 		.4byte	0x1e9
 531 01e1 12       		.uleb128 0x12
 532 01e2 01       		.uleb128 0x1
 533 01e3 50       		.byte	0x50
 534 01e4 03       		.uleb128 0x3
 535 01e5 0B       		.byte	0xb
 536 01e6 02C0     		.2byte	0xc002
 537 01e8 00       		.byte	0
 538 01e9 11       		.uleb128 0x11
 539 01ea 0E000000 		.4byte	.LVL6
 540 01ee 5F010000 		.4byte	0x15f
 541 01f2 FC010000 		.4byte	0x1fc
 542 01f6 12       		.uleb128 0x12
 543 01f7 01       		.uleb128 0x1
 544 01f8 50       		.byte	0x50
 545 01f9 01       		.uleb128 0x1
 546 01fa 30       		.byte	0x30
 547 01fb 00       		.byte	0
 548 01fc 13       		.uleb128 0x13
 549 01fd 14000000 		.4byte	.LVL7
 550 0201 03010000 		.4byte	0x103
 551 0205 12       		.uleb128 0x12
 552 0206 01       		.uleb128 0x1
 553 0207 50       		.byte	0x50
 554 0208 01       		.uleb128 0x1
 555 0209 30       		.byte	0x30
 556 020a 00       		.byte	0
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 21


 557 020b 00       		.byte	0
 558 020c 0A       		.uleb128 0xa
 559 020d 65020000 		.4byte	.LASF28
 560 0211 01       		.byte	0x1
 561 0212 76       		.byte	0x76
 562 0213 00000000 		.4byte	.LFB2
 563 0217 20000000 		.4byte	.LFE2-.LFB2
 564 021b 01       		.uleb128 0x1
 565 021c 9C       		.byte	0x9c
 566 021d 34020000 		.4byte	0x234
 567 0221 0D       		.uleb128 0xd
 568 0222 0E000000 		.4byte	.LVL8
 569 0226 BF010000 		.4byte	0x1bf
 570 022a 0D       		.uleb128 0xd
 571 022b 18000000 		.4byte	.LVL9
 572 022f E1000000 		.4byte	0xe1
 573 0233 00       		.byte	0
 574 0234 14       		.uleb128 0x14
 575 0235 11000000 		.4byte	.LASF29
 576 0239 01       		.byte	0x1
 577 023a 14       		.byte	0x14
 578 023b 6B000000 		.4byte	0x6b
 579 023f 05       		.uleb128 0x5
 580 0240 03       		.byte	0x3
 581 0241 00000000 		.4byte	CRC_initVar
 582 0245 14       		.uleb128 0x14
 583 0246 06000000 		.4byte	.LASF30
 584 024a 01       		.byte	0x1
 585 024b 16       		.byte	0x16
 586 024c D6000000 		.4byte	0xd6
 587 0250 05       		.uleb128 0x5
 588 0251 03       		.byte	0x3
 589 0252 00000000 		.4byte	CRC_backup
 590 0256 15       		.uleb128 0x15
 591 0257 50010000 		.4byte	.LASF36
 592 025b 04       		.byte	0x4
 593 025c E5       		.byte	0xe5
 594 025d 6B000000 		.4byte	0x6b
 595 0261 16       		.uleb128 0x16
 596 0262 74010000 		.4byte	.LASF37
 597 0266 04       		.byte	0x4
 598 0267 E6       		.byte	0xe6
 599 0268 17       		.uleb128 0x17
 600 0269 6B000000 		.4byte	0x6b
 601 026d 00       		.byte	0
 602 026e 00       		.byte	0
 603              		.section	.debug_abbrev,"",%progbits
 604              	.Ldebug_abbrev0:
 605 0000 01       		.uleb128 0x1
 606 0001 11       		.uleb128 0x11
 607 0002 01       		.byte	0x1
 608 0003 25       		.uleb128 0x25
 609 0004 0E       		.uleb128 0xe
 610 0005 13       		.uleb128 0x13
 611 0006 0B       		.uleb128 0xb
 612 0007 03       		.uleb128 0x3
 613 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 22


 614 0009 1B       		.uleb128 0x1b
 615 000a 0E       		.uleb128 0xe
 616 000b 55       		.uleb128 0x55
 617 000c 17       		.uleb128 0x17
 618 000d 11       		.uleb128 0x11
 619 000e 01       		.uleb128 0x1
 620 000f 10       		.uleb128 0x10
 621 0010 17       		.uleb128 0x17
 622 0011 00       		.byte	0
 623 0012 00       		.byte	0
 624 0013 02       		.uleb128 0x2
 625 0014 24       		.uleb128 0x24
 626 0015 00       		.byte	0
 627 0016 0B       		.uleb128 0xb
 628 0017 0B       		.uleb128 0xb
 629 0018 3E       		.uleb128 0x3e
 630 0019 0B       		.uleb128 0xb
 631 001a 03       		.uleb128 0x3
 632 001b 0E       		.uleb128 0xe
 633 001c 00       		.byte	0
 634 001d 00       		.byte	0
 635 001e 03       		.uleb128 0x3
 636 001f 24       		.uleb128 0x24
 637 0020 00       		.byte	0
 638 0021 0B       		.uleb128 0xb
 639 0022 0B       		.uleb128 0xb
 640 0023 3E       		.uleb128 0x3e
 641 0024 0B       		.uleb128 0xb
 642 0025 03       		.uleb128 0x3
 643 0026 08       		.uleb128 0x8
 644 0027 00       		.byte	0
 645 0028 00       		.byte	0
 646 0029 04       		.uleb128 0x4
 647 002a 16       		.uleb128 0x16
 648 002b 00       		.byte	0
 649 002c 03       		.uleb128 0x3
 650 002d 0E       		.uleb128 0xe
 651 002e 3A       		.uleb128 0x3a
 652 002f 0B       		.uleb128 0xb
 653 0030 3B       		.uleb128 0x3b
 654 0031 05       		.uleb128 0x5
 655 0032 49       		.uleb128 0x49
 656 0033 13       		.uleb128 0x13
 657 0034 00       		.byte	0
 658 0035 00       		.byte	0
 659 0036 05       		.uleb128 0x5
 660 0037 35       		.uleb128 0x35
 661 0038 00       		.byte	0
 662 0039 49       		.uleb128 0x49
 663 003a 13       		.uleb128 0x13
 664 003b 00       		.byte	0
 665 003c 00       		.byte	0
 666 003d 06       		.uleb128 0x6
 667 003e 13       		.uleb128 0x13
 668 003f 01       		.byte	0x1
 669 0040 0B       		.uleb128 0xb
 670 0041 0B       		.uleb128 0xb
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 23


 671 0042 3A       		.uleb128 0x3a
 672 0043 0B       		.uleb128 0xb
 673 0044 3B       		.uleb128 0x3b
 674 0045 0B       		.uleb128 0xb
 675 0046 01       		.uleb128 0x1
 676 0047 13       		.uleb128 0x13
 677 0048 00       		.byte	0
 678 0049 00       		.byte	0
 679 004a 07       		.uleb128 0x7
 680 004b 0D       		.uleb128 0xd
 681 004c 00       		.byte	0
 682 004d 03       		.uleb128 0x3
 683 004e 0E       		.uleb128 0xe
 684 004f 3A       		.uleb128 0x3a
 685 0050 0B       		.uleb128 0xb
 686 0051 3B       		.uleb128 0x3b
 687 0052 0B       		.uleb128 0xb
 688 0053 49       		.uleb128 0x49
 689 0054 13       		.uleb128 0x13
 690 0055 38       		.uleb128 0x38
 691 0056 0B       		.uleb128 0xb
 692 0057 00       		.byte	0
 693 0058 00       		.byte	0
 694 0059 08       		.uleb128 0x8
 695 005a 16       		.uleb128 0x16
 696 005b 00       		.byte	0
 697 005c 03       		.uleb128 0x3
 698 005d 0E       		.uleb128 0xe
 699 005e 3A       		.uleb128 0x3a
 700 005f 0B       		.uleb128 0xb
 701 0060 3B       		.uleb128 0x3b
 702 0061 0B       		.uleb128 0xb
 703 0062 49       		.uleb128 0x49
 704 0063 13       		.uleb128 0x13
 705 0064 00       		.byte	0
 706 0065 00       		.byte	0
 707 0066 09       		.uleb128 0x9
 708 0067 2E       		.uleb128 0x2e
 709 0068 00       		.byte	0
 710 0069 3F       		.uleb128 0x3f
 711 006a 19       		.uleb128 0x19
 712 006b 03       		.uleb128 0x3
 713 006c 0E       		.uleb128 0xe
 714 006d 3A       		.uleb128 0x3a
 715 006e 0B       		.uleb128 0xb
 716 006f 3B       		.uleb128 0x3b
 717 0070 0B       		.uleb128 0xb
 718 0071 27       		.uleb128 0x27
 719 0072 19       		.uleb128 0x19
 720 0073 11       		.uleb128 0x11
 721 0074 01       		.uleb128 0x1
 722 0075 12       		.uleb128 0x12
 723 0076 06       		.uleb128 0x6
 724 0077 40       		.uleb128 0x40
 725 0078 18       		.uleb128 0x18
 726 0079 9742     		.uleb128 0x2117
 727 007b 19       		.uleb128 0x19
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 24


 728 007c 00       		.byte	0
 729 007d 00       		.byte	0
 730 007e 0A       		.uleb128 0xa
 731 007f 2E       		.uleb128 0x2e
 732 0080 01       		.byte	0x1
 733 0081 3F       		.uleb128 0x3f
 734 0082 19       		.uleb128 0x19
 735 0083 03       		.uleb128 0x3
 736 0084 0E       		.uleb128 0xe
 737 0085 3A       		.uleb128 0x3a
 738 0086 0B       		.uleb128 0xb
 739 0087 3B       		.uleb128 0x3b
 740 0088 0B       		.uleb128 0xb
 741 0089 27       		.uleb128 0x27
 742 008a 19       		.uleb128 0x19
 743 008b 11       		.uleb128 0x11
 744 008c 01       		.uleb128 0x1
 745 008d 12       		.uleb128 0x12
 746 008e 06       		.uleb128 0x6
 747 008f 40       		.uleb128 0x40
 748 0090 18       		.uleb128 0x18
 749 0091 9742     		.uleb128 0x2117
 750 0093 19       		.uleb128 0x19
 751 0094 01       		.uleb128 0x1
 752 0095 13       		.uleb128 0x13
 753 0096 00       		.byte	0
 754 0097 00       		.byte	0
 755 0098 0B       		.uleb128 0xb
 756 0099 05       		.uleb128 0x5
 757 009a 00       		.byte	0
 758 009b 03       		.uleb128 0x3
 759 009c 0E       		.uleb128 0xe
 760 009d 3A       		.uleb128 0x3a
 761 009e 0B       		.uleb128 0xb
 762 009f 3B       		.uleb128 0x3b
 763 00a0 0B       		.uleb128 0xb
 764 00a1 49       		.uleb128 0x49
 765 00a2 13       		.uleb128 0x13
 766 00a3 02       		.uleb128 0x2
 767 00a4 17       		.uleb128 0x17
 768 00a5 00       		.byte	0
 769 00a6 00       		.byte	0
 770 00a7 0C       		.uleb128 0xc
 771 00a8 34       		.uleb128 0x34
 772 00a9 00       		.byte	0
 773 00aa 03       		.uleb128 0x3
 774 00ab 0E       		.uleb128 0xe
 775 00ac 3A       		.uleb128 0x3a
 776 00ad 0B       		.uleb128 0xb
 777 00ae 3B       		.uleb128 0x3b
 778 00af 0B       		.uleb128 0xb
 779 00b0 49       		.uleb128 0x49
 780 00b1 13       		.uleb128 0x13
 781 00b2 02       		.uleb128 0x2
 782 00b3 17       		.uleb128 0x17
 783 00b4 00       		.byte	0
 784 00b5 00       		.byte	0
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 25


 785 00b6 0D       		.uleb128 0xd
 786 00b7 898201   		.uleb128 0x4109
 787 00ba 00       		.byte	0
 788 00bb 11       		.uleb128 0x11
 789 00bc 01       		.uleb128 0x1
 790 00bd 31       		.uleb128 0x31
 791 00be 13       		.uleb128 0x13
 792 00bf 00       		.byte	0
 793 00c0 00       		.byte	0
 794 00c1 0E       		.uleb128 0xe
 795 00c2 2E       		.uleb128 0x2e
 796 00c3 00       		.byte	0
 797 00c4 3F       		.uleb128 0x3f
 798 00c5 19       		.uleb128 0x19
 799 00c6 03       		.uleb128 0x3
 800 00c7 0E       		.uleb128 0xe
 801 00c8 3A       		.uleb128 0x3a
 802 00c9 0B       		.uleb128 0xb
 803 00ca 3B       		.uleb128 0x3b
 804 00cb 05       		.uleb128 0x5
 805 00cc 27       		.uleb128 0x27
 806 00cd 19       		.uleb128 0x19
 807 00ce 49       		.uleb128 0x49
 808 00cf 13       		.uleb128 0x13
 809 00d0 11       		.uleb128 0x11
 810 00d1 01       		.uleb128 0x1
 811 00d2 12       		.uleb128 0x12
 812 00d3 06       		.uleb128 0x6
 813 00d4 40       		.uleb128 0x40
 814 00d5 18       		.uleb128 0x18
 815 00d6 9742     		.uleb128 0x2117
 816 00d8 19       		.uleb128 0x19
 817 00d9 00       		.byte	0
 818 00da 00       		.byte	0
 819 00db 0F       		.uleb128 0xf
 820 00dc 2E       		.uleb128 0x2e
 821 00dd 01       		.byte	0x1
 822 00de 3F       		.uleb128 0x3f
 823 00df 19       		.uleb128 0x19
 824 00e0 03       		.uleb128 0x3
 825 00e1 0E       		.uleb128 0xe
 826 00e2 3A       		.uleb128 0x3a
 827 00e3 0B       		.uleb128 0xb
 828 00e4 3B       		.uleb128 0x3b
 829 00e5 05       		.uleb128 0x5
 830 00e6 27       		.uleb128 0x27
 831 00e7 19       		.uleb128 0x19
 832 00e8 11       		.uleb128 0x11
 833 00e9 01       		.uleb128 0x1
 834 00ea 12       		.uleb128 0x12
 835 00eb 06       		.uleb128 0x6
 836 00ec 40       		.uleb128 0x40
 837 00ed 18       		.uleb128 0x18
 838 00ee 9742     		.uleb128 0x2117
 839 00f0 19       		.uleb128 0x19
 840 00f1 01       		.uleb128 0x1
 841 00f2 13       		.uleb128 0x13
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 26


 842 00f3 00       		.byte	0
 843 00f4 00       		.byte	0
 844 00f5 10       		.uleb128 0x10
 845 00f6 05       		.uleb128 0x5
 846 00f7 00       		.byte	0
 847 00f8 03       		.uleb128 0x3
 848 00f9 0E       		.uleb128 0xe
 849 00fa 3A       		.uleb128 0x3a
 850 00fb 0B       		.uleb128 0xb
 851 00fc 3B       		.uleb128 0x3b
 852 00fd 05       		.uleb128 0x5
 853 00fe 49       		.uleb128 0x49
 854 00ff 13       		.uleb128 0x13
 855 0100 02       		.uleb128 0x2
 856 0101 18       		.uleb128 0x18
 857 0102 00       		.byte	0
 858 0103 00       		.byte	0
 859 0104 11       		.uleb128 0x11
 860 0105 898201   		.uleb128 0x4109
 861 0108 01       		.byte	0x1
 862 0109 11       		.uleb128 0x11
 863 010a 01       		.uleb128 0x1
 864 010b 31       		.uleb128 0x31
 865 010c 13       		.uleb128 0x13
 866 010d 01       		.uleb128 0x1
 867 010e 13       		.uleb128 0x13
 868 010f 00       		.byte	0
 869 0110 00       		.byte	0
 870 0111 12       		.uleb128 0x12
 871 0112 8A8201   		.uleb128 0x410a
 872 0115 00       		.byte	0
 873 0116 02       		.uleb128 0x2
 874 0117 18       		.uleb128 0x18
 875 0118 9142     		.uleb128 0x2111
 876 011a 18       		.uleb128 0x18
 877 011b 00       		.byte	0
 878 011c 00       		.byte	0
 879 011d 13       		.uleb128 0x13
 880 011e 898201   		.uleb128 0x4109
 881 0121 01       		.byte	0x1
 882 0122 11       		.uleb128 0x11
 883 0123 01       		.uleb128 0x1
 884 0124 31       		.uleb128 0x31
 885 0125 13       		.uleb128 0x13
 886 0126 00       		.byte	0
 887 0127 00       		.byte	0
 888 0128 14       		.uleb128 0x14
 889 0129 34       		.uleb128 0x34
 890 012a 00       		.byte	0
 891 012b 03       		.uleb128 0x3
 892 012c 0E       		.uleb128 0xe
 893 012d 3A       		.uleb128 0x3a
 894 012e 0B       		.uleb128 0xb
 895 012f 3B       		.uleb128 0x3b
 896 0130 0B       		.uleb128 0xb
 897 0131 49       		.uleb128 0x49
 898 0132 13       		.uleb128 0x13
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 27


 899 0133 3F       		.uleb128 0x3f
 900 0134 19       		.uleb128 0x19
 901 0135 02       		.uleb128 0x2
 902 0136 18       		.uleb128 0x18
 903 0137 00       		.byte	0
 904 0138 00       		.byte	0
 905 0139 15       		.uleb128 0x15
 906 013a 2E       		.uleb128 0x2e
 907 013b 00       		.byte	0
 908 013c 3F       		.uleb128 0x3f
 909 013d 19       		.uleb128 0x19
 910 013e 03       		.uleb128 0x3
 911 013f 0E       		.uleb128 0xe
 912 0140 3A       		.uleb128 0x3a
 913 0141 0B       		.uleb128 0xb
 914 0142 3B       		.uleb128 0x3b
 915 0143 0B       		.uleb128 0xb
 916 0144 27       		.uleb128 0x27
 917 0145 19       		.uleb128 0x19
 918 0146 49       		.uleb128 0x49
 919 0147 13       		.uleb128 0x13
 920 0148 3C       		.uleb128 0x3c
 921 0149 19       		.uleb128 0x19
 922 014a 00       		.byte	0
 923 014b 00       		.byte	0
 924 014c 16       		.uleb128 0x16
 925 014d 2E       		.uleb128 0x2e
 926 014e 01       		.byte	0x1
 927 014f 3F       		.uleb128 0x3f
 928 0150 19       		.uleb128 0x19
 929 0151 03       		.uleb128 0x3
 930 0152 0E       		.uleb128 0xe
 931 0153 3A       		.uleb128 0x3a
 932 0154 0B       		.uleb128 0xb
 933 0155 3B       		.uleb128 0x3b
 934 0156 0B       		.uleb128 0xb
 935 0157 27       		.uleb128 0x27
 936 0158 19       		.uleb128 0x19
 937 0159 3C       		.uleb128 0x3c
 938 015a 19       		.uleb128 0x19
 939 015b 00       		.byte	0
 940 015c 00       		.byte	0
 941 015d 17       		.uleb128 0x17
 942 015e 05       		.uleb128 0x5
 943 015f 00       		.byte	0
 944 0160 49       		.uleb128 0x49
 945 0161 13       		.uleb128 0x13
 946 0162 00       		.byte	0
 947 0163 00       		.byte	0
 948 0164 00       		.byte	0
 949              		.section	.debug_loc,"",%progbits
 950              	.Ldebug_loc0:
 951              	.LLST0:
 952 0000 00000000 		.4byte	.LVL0
 953 0004 07000000 		.4byte	.LVL1-1
 954 0008 0100     		.2byte	0x1
 955 000a 50       		.byte	0x50
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 28


 956 000b 07000000 		.4byte	.LVL1-1
 957 000f 34000000 		.4byte	.LFE4
 958 0013 0400     		.2byte	0x4
 959 0015 F3       		.byte	0xf3
 960 0016 01       		.uleb128 0x1
 961 0017 50       		.byte	0x50
 962 0018 9F       		.byte	0x9f
 963 0019 00000000 		.4byte	0
 964 001d 00000000 		.4byte	0
 965              	.LLST1:
 966 0021 08000000 		.4byte	.LVL1
 967 0025 21000000 		.4byte	.LVL2-1
 968 0029 0100     		.2byte	0x1
 969 002b 50       		.byte	0x50
 970 002c 00000000 		.4byte	0
 971 0030 00000000 		.4byte	0
 972              		.section	.debug_aranges,"",%progbits
 973 0000 5C000000 		.4byte	0x5c
 974 0004 0200     		.2byte	0x2
 975 0006 00000000 		.4byte	.Ldebug_info0
 976 000a 04       		.byte	0x4
 977 000b 00       		.byte	0
 978 000c 0000     		.2byte	0
 979 000e 0000     		.2byte	0
 980 0010 00000000 		.4byte	.LFB1
 981 0014 10000000 		.4byte	.LFE1-.LFB1
 982 0018 00000000 		.4byte	.LFB3
 983 001c 10000000 		.4byte	.LFE3-.LFB3
 984 0020 00000000 		.4byte	.LFB4
 985 0024 34000000 		.4byte	.LFE4-.LFB4
 986 0028 00000000 		.4byte	.LFB5
 987 002c 0C000000 		.4byte	.LFE5-.LFB5
 988 0030 00000000 		.4byte	.LFB6
 989 0034 0C000000 		.4byte	.LFE6-.LFB6
 990 0038 00000000 		.4byte	.LFB7
 991 003c 0C000000 		.4byte	.LFE7-.LFB7
 992 0040 00000000 		.4byte	.LFB8
 993 0044 0C000000 		.4byte	.LFE8-.LFB8
 994 0048 00000000 		.4byte	.LFB0
 995 004c 1C000000 		.4byte	.LFE0-.LFB0
 996 0050 00000000 		.4byte	.LFB2
 997 0054 20000000 		.4byte	.LFE2-.LFB2
 998 0058 00000000 		.4byte	0
 999 005c 00000000 		.4byte	0
 1000              		.section	.debug_ranges,"",%progbits
 1001              	.Ldebug_ranges0:
 1002 0000 00000000 		.4byte	.LFB1
 1003 0004 10000000 		.4byte	.LFE1
 1004 0008 00000000 		.4byte	.LFB3
 1005 000c 10000000 		.4byte	.LFE3
 1006 0010 00000000 		.4byte	.LFB4
 1007 0014 34000000 		.4byte	.LFE4
 1008 0018 00000000 		.4byte	.LFB5
 1009 001c 0C000000 		.4byte	.LFE5
 1010 0020 00000000 		.4byte	.LFB6
 1011 0024 0C000000 		.4byte	.LFE6
 1012 0028 00000000 		.4byte	.LFB7
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 29


 1013 002c 0C000000 		.4byte	.LFE7
 1014 0030 00000000 		.4byte	.LFB8
 1015 0034 0C000000 		.4byte	.LFE8
 1016 0038 00000000 		.4byte	.LFB0
 1017 003c 1C000000 		.4byte	.LFE0
 1018 0040 00000000 		.4byte	.LFB2
 1019 0044 20000000 		.4byte	.LFE2
 1020 0048 00000000 		.4byte	0
 1021 004c 00000000 		.4byte	0
 1022              		.section	.debug_line,"",%progbits
 1023              	.Ldebug_line0:
 1024 0000 14010000 		.section	.debug_str,"MS",%progbits,1
 1024      02005400 
 1024      00000201 
 1024      FB0E0D00 
 1024      01010101 
 1025              	.LASF15:
 1026 0000 72656731 		.ascii	"reg16\000"
 1026      3600
 1027              	.LASF30:
 1028 0006 4352435F 		.ascii	"CRC_backup\000"
 1028      6261636B 
 1028      757000
 1029              	.LASF29:
 1030 0011 4352435F 		.ascii	"CRC_initVar\000"
 1030      696E6974 
 1030      56617200 
 1031              	.LASF25:
 1032 001d 4352435F 		.ascii	"CRC_WritePolynomial\000"
 1032      57726974 
 1032      65506F6C 
 1032      796E6F6D 
 1032      69616C00 
 1033              	.LASF33:
 1034 0031 443A5C77 		.ascii	"D:\\workspace_SeniorDeisgn\\PSoC\\SD1\\TestCRC.cyds"
 1034      6F726B73 
 1034      70616365 
 1034      5F53656E 
 1034      696F7244 
 1035 0060 6E00     		.ascii	"n\000"
 1036              	.LASF3:
 1037 0062 73686F72 		.ascii	"short unsigned int\000"
 1037      7420756E 
 1037      7369676E 
 1037      65642069 
 1037      6E7400
 1038              	.LASF24:
 1039 0075 4352435F 		.ascii	"CRC_ReadPolynomial\000"
 1039      52656164 
 1039      506F6C79 
 1039      6E6F6D69 
 1039      616C00
 1040              	.LASF32:
 1041 0088 47656E65 		.ascii	"Generated_Source\\PSoC4\\CRC.c\000"
 1041      72617465 
 1041      645F536F 
 1041      75726365 
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 30


 1041      5C50536F 
 1042              	.LASF20:
 1043 00a5 4352435F 		.ascii	"CRC_ResetSeedInit\000"
 1043      52657365 
 1043      74536565 
 1043      64496E69 
 1043      7400
 1044              	.LASF11:
 1045 00b7 666C6F61 		.ascii	"float\000"
 1045      7400
 1046              	.LASF17:
 1047 00bd 4352435F 		.ascii	"CRC_BACKUP_STRUCT\000"
 1047      4241434B 
 1047      55505F53 
 1047      54525543 
 1047      5400
 1048              	.LASF7:
 1049 00cf 6C6F6E67 		.ascii	"long long unsigned int\000"
 1049      206C6F6E 
 1049      6720756E 
 1049      7369676E 
 1049      65642069 
 1050              	.LASF1:
 1051 00e6 756E7369 		.ascii	"unsigned char\000"
 1051      676E6564 
 1051      20636861 
 1051      7200
 1052              	.LASF14:
 1053 00f4 72656738 		.ascii	"reg8\000"
 1053      00
 1054              	.LASF23:
 1055 00f9 4352435F 		.ascii	"CRC_ReadCRC\000"
 1055      52656164 
 1055      43524300 
 1056              	.LASF5:
 1057 0105 6C6F6E67 		.ascii	"long unsigned int\000"
 1057      20756E73 
 1057      69676E65 
 1057      6420696E 
 1057      7400
 1058              	.LASF9:
 1059 0117 75696E74 		.ascii	"uint8\000"
 1059      3800
 1060              	.LASF27:
 1061 011d 4352435F 		.ascii	"CRC_Init\000"
 1061      496E6974 
 1061      00
 1062              	.LASF35:
 1063 0126 656E6162 		.ascii	"enableInterrupts\000"
 1063      6C65496E 
 1063      74657272 
 1063      75707473 
 1063      00
 1064              	.LASF12:
 1065 0137 646F7562 		.ascii	"double\000"
 1065      6C6500
 1066              	.LASF26:
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 31


 1067 013e 706F6C79 		.ascii	"polynomial\000"
 1067      6E6F6D69 
 1067      616C00
 1068              	.LASF10:
 1069 0149 75696E74 		.ascii	"uint16\000"
 1069      313600
 1070              	.LASF36:
 1071 0150 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1071      74657243 
 1071      72697469 
 1071      63616C53 
 1071      65637469 
 1072              	.LASF8:
 1073 0167 756E7369 		.ascii	"unsigned int\000"
 1073      676E6564 
 1073      20696E74 
 1073      00
 1074              	.LASF37:
 1075 0174 43794578 		.ascii	"CyExitCriticalSection\000"
 1075      69744372 
 1075      69746963 
 1075      616C5365 
 1075      6374696F 
 1076              	.LASF18:
 1077 018a 4352435F 		.ascii	"CRC_Enable\000"
 1077      456E6162 
 1077      6C6500
 1078              	.LASF16:
 1079 0195 73697A65 		.ascii	"sizetype\000"
 1079      74797065 
 1079      00
 1080              	.LASF6:
 1081 019e 6C6F6E67 		.ascii	"long long int\000"
 1081      206C6F6E 
 1081      6720696E 
 1081      7400
 1082              	.LASF13:
 1083 01ac 63686172 		.ascii	"char\000"
 1083      00
 1084              	.LASF19:
 1085 01b1 4352435F 		.ascii	"CRC_Stop\000"
 1085      53746F70 
 1085      00
 1086              	.LASF31:
 1087 01ba 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1087      4320342E 
 1087      392E3320 
 1087      32303135 
 1087      30333033 
 1088 01ed 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1088      20726576 
 1088      6973696F 
 1088      6E203232 
 1088      31323230 
 1089 0220 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1089      66756E63 
 1089      74696F6E 
ARM GAS  C:\Users\Feiyang\AppData\Local\Temp\cc3HajFB.s 			page 32


 1089      2D736563 
 1089      74696F6E 
 1090              	.LASF2:
 1091 0248 73686F72 		.ascii	"short int\000"
 1091      7420696E 
 1091      7400
 1092              	.LASF22:
 1093 0252 73656564 		.ascii	"seed\000"
 1093      00
 1094              	.LASF21:
 1095 0257 4352435F 		.ascii	"CRC_WriteSeed\000"
 1095      57726974 
 1095      65536565 
 1095      6400
 1096              	.LASF28:
 1097 0265 4352435F 		.ascii	"CRC_Start\000"
 1097      53746172 
 1097      7400
 1098              	.LASF4:
 1099 026f 6C6F6E67 		.ascii	"long int\000"
 1099      20696E74 
 1099      00
 1100              	.LASF34:
 1101 0278 656E6162 		.ascii	"enableState\000"
 1101      6C655374 
 1101      61746500 
 1102              	.LASF0:
 1103 0284 7369676E 		.ascii	"signed char\000"
 1103      65642063 
 1103      68617200 
 1104              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
